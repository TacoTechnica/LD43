<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGoat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objMover</parentName>
  <maskName>maskEntity</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Overrides
_fric = 0.2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Goat state

enum GOAT_STATE {
    STANDING,
    WALKING,
    FOOD,
    FLEEING
};

_state = GOAT_STATE.STANDING;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Goat movement randomness

// Properties
_move_force = 0.15;
_run_force = 0.18;

// Util
_move_dir = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alerter and sound alarm
alerter_init();
_alarm_sound = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bounce progress
_bounce_progress_counter = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy alert and silence
goat_silence();
alerter_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// No longer alert
_state = GOAT_STATE.STANDING;
alerter_set_alert(ALERT_STATE.NORMAL);

goat_silence();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alternate between Standing and Walking

switch _state {
    case GOAT_STATE.STANDING:
        _state = GOAT_STATE.WALKING;
        goat_choose_random_move_dir();
        break;
    case GOAT_STATE.WALKING:
        _state = GOAT_STATE.STANDING;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State machine transitions
if instance_exists(objPlayer) {
    var closeenough = sqr(x - objPlayer.x) + sqr(y - objPlayer.y) &lt; sqr(200);
    var sees_player = 
          closeenough &amp;&amp; !collision_line(x, y, objPlayer.x, objPlayer.y, objCollision, false, false);
    
    switch _state {
        case GOAT_STATE.STANDING:
            // Wait till walking
            if (alarm[0] == -1) alarm[0] = random(120) + 120;
            alerter_set_alert(ALERT_STATE.NORMAL);
            break;
        case GOAT_STATE.WALKING:
            // Wait till standing
            if (alarm[0] == -1) alarm[0] = random(60) + 60;
            alerter_set_alert(ALERT_STATE.NORMAL);
            break;
        case GOAT_STATE.FOOD:
            if !sees_player || player_get_item_index() != objHay {
                _state = GOAT_STATE.STANDING;
            } else {
                goat_follow_player();
                alerter_set_alert(ALERT_STATE.HEART);
            }
            break;
        case GOAT_STATE.FLEEING:
            var near_guard = collision_circle(x, y, 50, objSentry, false, false);
            if sees_player &amp;&amp; !near_guard {
                goat_set_alert();
                alarm[1] = -1;
            } else {
                if (alarm[1] == -1) alarm[1] = 120;
            }
            break;
    }
    
    if _state != GOAT_STATE.FLEEING {
        if player_get_item_index() == objHay {
            if sees_player {
                _state = GOAT_STATE.FOOD;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alert if see player subduing

if _state != GOAT_STATE.FLEEING &amp;&amp; instance_exists(objPlayerSubduing) {
    if !collision_line(x, y, objPlayerSubduing.x, objPlayerSubduing.y, objCollision, false, true) {
        goat_set_alert();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alert guards if fleeing
if instance_exists(objPlayer) {
    if _state == GOAT_STATE.FLEEING {
        with (objSentry) {
            if _state != SENTRY_STATE.GROUNDED &amp;&amp; !_sees_player {
                if sqr(x - other.x) + sqr(y - other.y) &lt; sqr(200) {
                    _move_target_x = objPlayer.x;
                    _move_target_y = objPlayer.y;
                    _state = SENTRY_STATE.SEARCHING;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Walk or run if walking or running

switch _state {
    case GOAT_STATE.WALKING:
    case GOAT_STATE.FOOD:
        _vel_x += lengthdir_x(_move_force, _move_dir);
        _vel_y += lengthdir_y(_move_force, _move_dir);
        // Bounce off the walls!
        if place_meeting(x + _vel_x, y + _vel_y, objCollision) {
            goat_choose_random_move_dir();
        }
        break;
    case GOAT_STATE.FLEEING:
        _vel_x += lengthdir_x(_run_force, _move_dir);
        _vel_y += lengthdir_y(_run_force, _move_dir);
        // Bounce off the walls!
        // TODO: Choose direction away from player!
        if place_meeting(x + _vel_x, y + _vel_y, objCollision) {
            goat_choose_random_move_dir();
        }
        break;

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Visuals

depth = -y;

if (0 &lt;= _move_dir &amp;&amp; _move_dir &lt; 90) || (270 &lt;= _move_dir &amp;&amp; _move_dir &lt; 360)
    image_xscale = 1;
else
    image_xscale = -1;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Bounce

var bounce_speed = mover_get_bounce_scale();
var bounce_scale = mover_get_bounce_speed();

// If we're moving, scale up!
var target_scale = _state != GOAT_STATE.STANDING;

// Start from zero
if !target_scale &amp;&amp; abs(bounce_scale) &lt; 0.05 {
    mover_reset_bounce();
    _bounce_progress_counter = 0;
}

bounce_speed += (target_scale - bounce_speed) * 0.1;
bounce_scale += (target_scale - bounce_scale) * 0.3;

mover_set_bounce_speed(bounce_speed);
mover_set_bounce_scale(bounce_scale);

// Every bump
if mover_get_bounce_progress() &gt; _bounce_progress_counter {
    _bounce_progress_counter = ceil(mover_get_bounce_progress());
    if (x &gt;= view_xview &amp;&amp; x &lt;= view_xview + view_wview &amp;&amp; y &gt;= view_yview &amp;&amp; y &lt;= view_yview + view_hview) {
        if _bounce_progress_counter % 2 == 0
            audio_play_sound(sound_goat_walk_1, 2, false);
        else
            audio_play_sound(sound_goat_walk_2, 2, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Extra physics!
if _state == GOAT_STATE.WALKING {
    if place_meeting(x + _vel_x, y + _vel_y, objCollisionGoat) {
        goat_choose_random_move_dir();
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
